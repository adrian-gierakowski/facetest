{"name":"Facetest","tagline":"nodejs module to facilitate api tests that require facebook test users","body":"##Uh  What?!\r\n[FaceTest](http://criso.github.com/facetest/) - nodejs module to facilitate api tests that require facebook test users\r\n\r\n## What?!!\r\nCreating facebook test users is pain.   \r\nIf you're building a `facebook` app or a web app that needs interacts with facebook user objects, this should make your life easier.\r\n\r\n\r\n## Installation via npm\r\n    $ npm install facetest\r\n\r\n\r\n## Init\r\nWhen creating a `facetest` object you'll need to pass in a facebook config object.\r\n\r\n```js\r\nvar config = {\r\n  appId:      <Your App Id>,\r\n  appSecret:  <Your App Secret>,\r\n  appInstalled: true,\r\n  scope:      'email, user_about_me, user_birthday, user_location, publish_stream, read_stream, friends_location',\r\n};\r\n\r\nvar FaceTest = require('facetest')\r\n  , facetest = new FaceTest(config);\r\n\r\n```\r\n\r\n## Create a test User\r\nCreates a facebook test user based on name given\r\n\r\n```js\r\n    var FaceTest = require('facetest')\r\n      , facetest = new FaceTest(config);\r\n\r\n    facetest.createUser('Magic Man', function (err, user) {\r\n      console.log(user); // { 'Magic Man': { id: ..., email: ....} }\r\n    });\r\n```\r\n\r\n## Create several test users\r\nCreates facebook test users based on an array of names\r\n\r\n```js\r\n    var FaceTest = require('facetest')\r\n      , facetest = new FaceTest(config);\r\n\r\n    var multipleUsers = ['Ricky Bobby', 'El Diablo', 'Magic Man'];\r\n\r\n    facetest.createUsers(multipleUsers, function(err, users) {\r\n      console.log(users);\r\n      // {\r\n      //  'Ricky Bobby':  { id: ..., email: ....}\r\n      //  'El Diablo':     { id: ..., email: ....}\r\n      //  'Magic Man':     { id: ..., email: ....}\r\n      // }\r\n    });\r\n```\r\n\r\n## Create facebook friends\r\n`createFriends()` expects an object containing an array of names\r\nThis will create facebook test users for all the names given.  \r\n  \r\nThe key of the object is an `anchor user`, which will have a friend\r\nrelationship with all the users in the given array.  \r\n  \r\nEach user will have a `friend object`.  \r\n\r\n```js\r\n    var FaceTest = require('facetest')\r\n      , facetest = new FaceTest(config);\r\n\r\n    var friends = {\r\n      'Ron Burgundy': ['Ricky Bobby', 'El Diablo', 'Veronica Corningstone']\r\n    };\r\n\r\n    // Ron Burgundy will be friends with Ricky bobby, El Diablo and Veronica Corningstone\r\n    // Ricky Bobby will *NOT* be friends with El Diablo. Infinite Sadness.\r\n    facetest.createFriends(friends, function(err, users) {\r\n      console.log(users);\r\n      // {\r\n      //    'Ron Burgundy':          { id: ..., email: ...., friends: [object, object, object]}\r\n      //  , 'Ricky Bobby':           { id: ..., email: ...., friends: [object]}\r\n      //  , 'El Diablo':             { id: ..., email: ...., friends: [object]}\r\n      //  , 'Veronica Corningstone': { id: ..., email: ...., friends: [object]}\r\n      // }\r\n    });\r\n```\r\n\r\n## Sample test\r\n```js\r\n  var vows     = require('vows')\r\n    , assert   = require('assert')\r\n    , FaceTest = require('facetest');\r\n\r\n  var facetest = new FaceTest();\r\n\r\n  vows.describe(\"testUser.test\").addBatch({\r\n    'After multiple users creation': {\r\n      topic:  function () {\r\n        var friends = {\r\n          'Ron Burgundy': ['Ricky Bobby', 'El Diablo', 'Veronica Corningstone']\r\n        };\r\n\r\n        facetest.createFriends(friends, this.callback);\r\n      },\r\n\r\n      'posting a blog post with facebook id':  {\r\n        topic: function (users) {\r\n\r\n          var user = facetest.getFacebookUser('El Diablo');\r\n          client.post('/post/1/facebook_id/' + user.id, this.callback);\r\n        },\r\n\r\n        'response': function (err, response) {\r\n          // test response from `/post/1/facebook_id/<facebook_id>`\r\n        }\r\n      }\r\n    }\r\n  }).addBatch({\r\n    'After test is over': {\r\n      topic:  function () {\r\n        facetest.removeAllFacebookUsers(this.callback);\r\n      },\r\n\r\n      'test users should be deleted': function (err, res) {\r\n        assert.isNull(err);\r\n        assert.equal(res.data, \"true\");\r\n        assert.isEmpty(faceTest.getFacebookUsers());\r\n      }\r\n    }\r\n  }).export(module);\r\n```\r\n\r\n## Running tests\r\n\r\n Before running the test suite, add your Facebook `appId` and `appSecret` to `tests/config.js`   \r\n This is needed to create `test users` and to get a test `access_token`\r\n\r\n    $ npm install\r\n    $ make test\r\n\r\n _Tests might fail if the Facebook api has an issue._\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2011 Cristiano Oliveira &lt;ocean.cris@gmail.com&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}